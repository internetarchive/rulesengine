# Generated by Django 2.1 on 2018-09-12 15:59

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("rules", "0009_auto_20180827_2146"),
    ]

    operations = [
        migrations.AddField(
            model_name="rule",
            name="ip_range_end",
            field=models.GenericIPAddressField(
                blank=True,
                help_text="The end of the IP address range to apply this rule to.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="rule",
            name="ip_range_start",
            field=models.GenericIPAddressField(
                blank=True,
                help_text="The start of the IP address range to apply this rule to.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="rulechange",
            name="ip_range_end",
            field=models.GenericIPAddressField(
                blank=True,
                help_text="The end of the IP address range to apply this rule to.",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="rulechange",
            name="ip_range_start",
            field=models.GenericIPAddressField(
                blank=True,
                help_text="The start of the IP address range to apply this rule to.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="rule",
            name="capture_date_end",
            field=models.DateTimeField(
                blank=True,
                help_text="The latest date of capture to apply this rule.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="rule",
            name="capture_date_start",
            field=models.DateTimeField(
                blank=True,
                help_text="The earliest date of capture to start applying this rule.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="rule",
            name="collection",
            field=models.TextField(
                blank=True, help_text="The collection this rule applies to."
            ),
        ),
        migrations.AlterField(
            model_name="rule",
            name="enabled",
            field=models.BooleanField(
                default=True,
                help_text="Whether or not the rule is enabled and returned for use.",
            ),
        ),
        migrations.AlterField(
            model_name="rule",
            name="neg_surt",
            field=models.TextField(
                blank=True,
                help_text="A SURT to use as an exception (i.e: if you want to use the rewrite_from/rewrite_to fields on a broad-scope SURT, -except- a subset, that subset would be represented here)",
                verbose_name="SURT negation",
            ),
        ),
        migrations.AlterField(
            model_name="rule",
            name="partner",
            field=models.TextField(
                blank=True, help_text="The partner this rule applies to."
            ),
        ),
        migrations.AlterField(
            model_name="rule",
            name="policy",
            field=models.CharField(
                choices=[
                    ("block", "Block playback"),
                    ("message", "Block playback with message"),
                    ("allow", "Allow playback"),
                    ("auth", "Require auth for playback"),
                    ("rewrite-all", "Rewrite playback for the entire page"),
                    ("rewrite-js", "Rewrite playback JavaScript"),
                    ("rewrite-headers", "Rewrite playback headers"),
                ],
                help_text="What action the Wayback Machine should take on encountering this rule",
                max_length=10,
            ),
        ),
        migrations.AlterField(
            model_name="rule",
            name="private_comment",
            field=models.TextField(
                blank=True,
                help_text="Explanatory comment visible only to rules engine admins.",
            ),
        ),
        migrations.AlterField(
            model_name="rule",
            name="public_comment",
            field=models.TextField(
                blank=True, help_text="Publicly visible explanatory comment."
            ),
        ),
        migrations.AlterField(
            model_name="rule",
            name="retrieve_date_end",
            field=models.DateTimeField(
                blank=True,
                help_text="The latest date of retrieval to apply this rule.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="rule",
            name="retrieve_date_start",
            field=models.DateTimeField(
                blank=True,
                help_text="The earliest date of retrieval to start applying this rule.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="rule",
            name="rewrite_from",
            field=models.TextField(
                blank=True,
                help_text="Text to match on the page that needs to be rewritten.",
            ),
        ),
        migrations.AlterField(
            model_name="rule",
            name="rewrite_to",
            field=models.TextField(
                blank=True, help_text="Resulting text for rewrite matches."
            ),
        ),
        migrations.AlterField(
            model_name="rule",
            name="seconds_since_capture",
            field=models.IntegerField(
                blank=True,
                help_text="Number of seconds after capture to apply this rule.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="rule",
            name="surt",
            field=models.TextField(
                help_text="The SURT (or partial SURT) to which this rule applies. This may be an incomplete SURT which will be matched for a more specific URL.",
                verbose_name="SURT",
            ),
        ),
        migrations.AlterField(
            model_name="rule",
            name="warc_match",
            field=models.TextField(
                blank=True,
                help_text="A regular expression for matching against a WARC name to decide whether or not this rule applies (matching must be done on the client side.)",
            ),
        ),
        migrations.AlterField(
            model_name="rulechange",
            name="capture_date_end",
            field=models.DateTimeField(
                blank=True,
                help_text="The latest date of capture to apply this rule.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="rulechange",
            name="capture_date_start",
            field=models.DateTimeField(
                blank=True,
                help_text="The earliest date of capture to start applying this rule.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="rulechange",
            name="change_comment",
            field=models.TextField(
                blank=True, help_text="A brief explanation of the change."
            ),
        ),
        migrations.AlterField(
            model_name="rulechange",
            name="change_user",
            field=models.TextField(
                blank=True, help_text="The name of the individual making this change."
            ),
        ),
        migrations.AlterField(
            model_name="rulechange",
            name="collection",
            field=models.TextField(
                blank=True, help_text="The collection this rule applies to."
            ),
        ),
        migrations.AlterField(
            model_name="rulechange",
            name="enabled",
            field=models.BooleanField(
                default=True,
                help_text="Whether or not the rule is enabled and returned for use.",
            ),
        ),
        migrations.AlterField(
            model_name="rulechange",
            name="neg_surt",
            field=models.TextField(
                blank=True,
                help_text="A SURT to use as an exception (i.e: if you want to use the rewrite_from/rewrite_to fields on a broad-scope SURT, -except- a subset, that subset would be represented here)",
                verbose_name="SURT negation",
            ),
        ),
        migrations.AlterField(
            model_name="rulechange",
            name="partner",
            field=models.TextField(
                blank=True, help_text="The partner this rule applies to."
            ),
        ),
        migrations.AlterField(
            model_name="rulechange",
            name="policy",
            field=models.CharField(
                choices=[
                    ("block", "Block playback"),
                    ("message", "Block playback with message"),
                    ("allow", "Allow playback"),
                    ("auth", "Require auth for playback"),
                    ("rewrite-all", "Rewrite playback for the entire page"),
                    ("rewrite-js", "Rewrite playback JavaScript"),
                    ("rewrite-headers", "Rewrite playback headers"),
                ],
                help_text="What action the Wayback Machine should take on encountering this rule",
                max_length=10,
            ),
        ),
        migrations.AlterField(
            model_name="rulechange",
            name="private_comment",
            field=models.TextField(
                blank=True,
                help_text="Explanatory comment visible only to rules engine admins.",
            ),
        ),
        migrations.AlterField(
            model_name="rulechange",
            name="public_comment",
            field=models.TextField(
                blank=True, help_text="Publicly visible explanatory comment."
            ),
        ),
        migrations.AlterField(
            model_name="rulechange",
            name="retrieve_date_end",
            field=models.DateTimeField(
                blank=True,
                help_text="The latest date of retrieval to apply this rule.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="rulechange",
            name="retrieve_date_start",
            field=models.DateTimeField(
                blank=True,
                help_text="The earliest date of retrieval to start applying this rule.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="rulechange",
            name="rewrite_from",
            field=models.TextField(
                blank=True,
                help_text="Text to match on the page that needs to be rewritten.",
            ),
        ),
        migrations.AlterField(
            model_name="rulechange",
            name="rewrite_to",
            field=models.TextField(
                blank=True, help_text="Resulting text for rewrite matches."
            ),
        ),
        migrations.AlterField(
            model_name="rulechange",
            name="seconds_since_capture",
            field=models.IntegerField(
                blank=True,
                help_text="Number of seconds after capture to apply this rule.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="rulechange",
            name="surt",
            field=models.TextField(
                help_text="The SURT (or partial SURT) to which this rule applies. This may be an incomplete SURT which will be matched for a more specific URL.",
                verbose_name="SURT",
            ),
        ),
        migrations.AlterField(
            model_name="rulechange",
            name="warc_match",
            field=models.TextField(
                blank=True,
                help_text="A regular expression for matching against a WARC name to decide whether or not this rule applies (matching must be done on the client side.)",
            ),
        ),
    ]
